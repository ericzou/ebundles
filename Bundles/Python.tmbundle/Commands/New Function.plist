<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env python

# This program takes in the name of one of python's special methods, and
# spits a snippet out.  If the name is unknown, make a regular (non-magic)
# method/function

# these functions take no argument except 'self'
selfList = (
    'del', 'repr', 'str', 'hash', 'nonzero', 'unicode', 'len', 'iter', 'neg',
    'pos', 'abs', 'invert', 'complex', 'int', 'long', 'float', 'oct', 'hex',
    'index', 'enter'
)
# these binary operators take both 'self' and 'other' as arguments
selfOtherList = (
 'lt', 'le', 'eq', 'ne', 'gt', 'ge', 'cmp', 'add', 'sub', 'mul', 'floordiv',
 'mod', 'divmod', 'lshift', 'rshift', 'and', 'xor', 'or', 'div', 'truediv',
 'radd', 'rsub', 'rmul', 'rdiv', 'rtruediv', 'rfloordiv', 'rmod', 'rdivmod',
 'rpow', 'rlshift', 'rrshift', 'rand', 'rxor', 'ror', 'iadd', 'isub', 'imul',
 'idiv', 'itruediv', 'ifloordiv', 'imod', 'ilshift', 'irshift', 'iand',
 'ixor', 'ior', 'coerce', 'pow', 'ipow'
)
# these functions take some argument(s) other than self
selfAndMore = {
         'getattr' : 'name',
         'delattr' : 'name',
    'getattribute' : 'name',
         'setattr' : 'name, value',
         'getitem' : 'key',
         'delitem' : 'key',
         'setitem' : 'key, value',
             'get' : 'instance, owner',
             'set' : 'instance, value',
          'delete' : 'instance',
        'contains' : 'item',
        'setslice' : 'i, j, sequence',
        'delslice' : 'i, j',
            'exit' : 'exc_type, exc_value, traceback',
}

sPass = "\t${0:pass}"

def defLine(func, args):
    return ''.join(["def __", func, "__(", args, "):\n", sPass])

def make_snippet(name):
    if name in selfList:
        return defLine(name, 'self')
    
    elif name in selfOtherList:
        return defLine(name, 'self, other')
    
    elif name in selfAndMore:
        return defLine(name, 'self, ' + selfAndMore[name])
    
    elif name in ('init', 'call', 'new'):
        return defLine(name, 'self${2/([^,])?.*/(?1:, )/}${2:arg}')
        
    else:
        return ''.join(['def ', name, '(${3:self${2/([^,])?.*/(?1:, )/}${2:arg}}):\n', sPass])

# actually print the thing out, using the current word in TM
from os import environ as env
print make_snippet(env['TM_CURRENT_WORD'])</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>$</string>
	<key>name</key>
	<string>New Method/Function</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source.python</string>
	<key>uuid</key>
	<string>75929BC0-24E5-456D-9FC5-91BF4B490027</string>
</dict>
</plist>

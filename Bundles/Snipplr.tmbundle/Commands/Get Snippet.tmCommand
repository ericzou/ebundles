<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>name</key>
        <string>Get Snippet</string>
        <key>uuid</key>
        <string>D9E343A9-A23D-4601-85C4-BB463A55FE78</string>
        <key>input</key>
        <string>none</string>
        <key>output</key>
        <string>insertAsSnippet</string>
        <key>command</key>
        <string>#!/usr/bin/env ruby -w
require "xmlrpc/client"
require "cgi"
require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"

COCOA_DIALOG = ENV['TM_SUPPORT_PATH'] + '/bin/CocoaDialog'
unless File.exists?(COCOA_DIALOG)
  print "Error: wxCocoaDialog not found"
  TextMate.exit_show_tool_tip
end

# Need to hardcode the variable until we get
# environment variables in e.
API_KEY = "YOUR_API_KEY_HERE" 
server = XMLRPC::Client.new( "snipplr.com", "/xml-rpc.php")

if 0 == server.call("user.checkkey", API_KEY)
  puts "#{API_KEY} was not accepted as a valid API Key"
  TextMate.exit_show_tool_tip
end

begin
  result = server.call("snippet.list", API_KEY)
  result_list = ""
  result.each { |row| result_list += "'#{row['id']} : #{row['title']}' " }
  
  res=%x("#{COCOA_DIALOG}" dropdown \
      --title "Retrieve Snippet" \
      --string-output \
      --text "You have #{result.length} Snipplr entries stored under this API Key." \
      --items #{result_list} \
      --button1 'Retreive' --button2 'Cancel')
  button, item = res.split
  case button
    when 'Retreive'
      $snippet = server.call("snippet.get", item)
    when 'Cancel'
      puts "Snippet retreival cancelled."
      exit
  end 
  puts e_sn(CGI::unescapeHTML($snippet['source']))
  
rescue XMLRPC::FaultException => err
  if err.faultString =~ /No snippets found/ 
    print "You don't have any snippets yet!" 
  else 
    print "Error: " + err.faultCode.to_s + ", " + err.faultString
  end
  TextMate.exit_show_tool_tip
rescue
  print "Error: #{$!}"
  TextMate.exit_show_tool_tip
end</string>
        <key>keyEquivalent</key>
        <string>~p</string>
    </dict>
</plist>

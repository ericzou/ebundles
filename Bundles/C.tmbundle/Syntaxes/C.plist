<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>c</string>
		<string>h</string>
	</array>
	<key>firstLineMatch</key>
	<string>-[*]-( Mode:)? C -[*]-</string>
	<key>foldingStartMarker</key>
	<string>(?x)
		 /\*\*(?!\*)
		|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
	</string>
	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
	<key>name</key>
	<string>C</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-enabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-disabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-other</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.c</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>//</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>comment.line.double-slash.c++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>meta.line-continuation.c++</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\b</string>
			<key>name</key>
			<string>keyword.control.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\b</string>
			<key>name</key>
			<string>storage.type.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(const|extern|register|restrict|static|volatile|inline)\b</string>
			<key>name</key>
			<string>storage.modifier.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>common C constant naming idiom -- kConstantVariable</string>
			<key>match</key>
			<string>\bk[A-Z]\w*\b</string>
			<key>name</key>
			<string>constant.other.variable.mac-classic.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bg[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.global.mac-classic.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bs[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.static.mac-classic.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(NULL|true|false|TRUE|FALSE)\b</string>
			<key>name</key>
			<string>constant.language.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(sizeof)\b</string>
			<key>name</key>
			<string>keyword.operator.sizeof.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
			<key>name</key>
			<string>constant.numeric.c</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
				^\s*\#\s*(define)\s+             # define
				((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
				(\()(
					\s* \g&lt;id&gt; \s*              # first argument
					(, \s* \g&lt;id&gt; \s*)*         # additional arguments
				)(\))
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.define.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.preprocessor.c</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parameters.c</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.preprocessor.c</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.macro.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>meta.line-continuation.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(error|warning)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.error.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.preprocessor.diagnostic.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>meta.line-continuation.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(include|import)\b\s+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.include.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c.include</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>meta.line-continuation.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.include.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.lt-gt.include.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma-mark</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>meta.line-continuation.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\b</string>
			<key>name</key>
			<string>support.type.sys-types.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b</string>
			<key>name</key>
			<string>support.type.pthread.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)\b</string>
			<key>name</key>
			<string>support.type.stdint.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b</string>
			<key>name</key>
			<string>support.constant.mac-classic.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b</string>
			<key>name</key>
			<string>support.type.mac-classic.c</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
				(?:  ^                                 # begin-of-line
				  |  (?: (?&lt;!else|new) (?&lt;=\w)\s+      #  or word + space before name
				       | (?&lt;!&amp;&amp;)       (?&lt;=[*&amp;&gt;])\s*   #  or type modifier before name
				     )
				)
				([A-Za-z_][A-Za-z0-9_:]*)              # actual name
				 \s*(\() (?=                           # match "("
				           (?&lt;fun&gt; [^()]++ | \( \g&lt;fun&gt;*+ \) )*+   # function arguments
				    \) 		                           # match ")"
				 (\s+const)?\s*                        # optional const modifier
				 (\{|\n|//|/\*))                       # start bracket or end-of-line
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
				(?:  ^                                        # begin-of-line
				  |  (?: (?&lt;!else|new|return) (?&lt;=\w)\s+      #  or word + space before name
				       | (?&lt;!&amp;&amp;)              (?&lt;=[*&amp;])\s*    #  or type modifier before name
				     )
				)
				([A-Za-z_][A-Za-z0-9_:]*)              # actual name
				 \s+(\() (?=                           # match "("
				           (?&lt;fun&gt; [^()]++ | \( \g&lt;fun&gt;*+ \) )*+   # function arguments
				    \)                                 # match ")"
				 (\s+const)?\s*                        # optional const modifier
				 ;)                                    # terminating semi-colon
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.prototype.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>source.open-gl</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*if(n?def)?\b.*$</string>
			<key>comment</key>
			<string>eat nested preprocessor if(def)s</string>
			<key>end</key>
			<string>^\s*#\s*endif\b.*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#disabled</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pragma-mark</string>
				</dict>
			</array>
		</dict>
		<key>pragma-mark</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.pragma.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.toc-list.pragma-mark.c</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
			<key>name</key>
			<string>meta.section</string>
		</dict>
		<key>preprocessor-rule-disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0)\b).*
</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>name</key>
					<string>comment.block.preprocessor.if-branch</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>preprocessor-rule-enabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0*1)\b)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b).*
</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.c</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.else-branch</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>preprocessor-rule-other</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#\s*(if(n?def)?)\b.*(?:(?=(?://|/\*))|$))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b).*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2})</string>
					<key>name</key>
					<string>constant.character.escape.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.c</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)%
						(\d+\$)?                             # field (argument #)
						[#0\- +']*                           # flags
						[,;:_]?                              # separator character (AltiVec)
						((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
						(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
						[diouxXDOUeEfFgGaACcSspn%]           # conversion type
					</string>
					<key>name</key>
					<string>constant.other.placeholder.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%</string>
					<key>name</key>
					<string>invalid.illegal.placeholder.c</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c</string>
	<key>uuid</key>
	<string>25066DC2-6B1D-11D9-9D5B-000D93589AF6</string>
</dict>
</plist>

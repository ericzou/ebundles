<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>I don't think anyone uses .hp. .cp tends to be paired with .h. (I could be wrong. :) -- chris</string>
	<key>fileTypes</key>
	<array>
		<string>cc</string>
		<string>cpp</string>
		<string>cp</string>
		<string>cxx</string>
		<string>c++</string>
		<string>C</string>
		<string>h</string>
		<string>hh</string>
		<string>hpp</string>
		<string>h++</string>
	</array>
	<key>firstLineMatch</key>
	<string>-\*- C\+\+ -\*-</string>
	<key>foldingStartMarker</key>
	<string>(?x)
		 /\*\*(?!\*)
		|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
	</string>
	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
	<key>name</key>
	<string>C++</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>source.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(friend|explicit|private|protected|public|virtual)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(catch|namespace|operator|try|throw|using)\b</string>
			<key>name</key>
			<string>keyword.control.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bdelete\b(\s*\[\])?|\bnew\b</string>
			<key>name</key>
			<string>keyword.control.c++</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>common C++ instance var naming idiom -- fMemberName</string>
			<key>match</key>
			<string>\b(f|m)[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.member.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(this)\b</string>
			<key>name</key>
			<string>variable.language.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\btemplate\b\s*</string>
			<key>name</key>
			<string>storage.type.template.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\b\s*</string>
			<key>name</key>
			<string>keyword.operator.cast.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq)\b</string>
			<key>name</key>
			<string>keyword.operator.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(class|wchar_t)\b</string>
			<key>name</key>
			<string>storage.type.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(export|mutable|typename)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
				(?:  ^                                 # begin-of-line
				  |  (?: (?&lt;!else|new|=) )             #  or word + space before name
				)
				((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name
				 \s*(\() (?=[^)]*\)                      # match "(" and use look-ahead for ")"
				 (\s*=\s*0)?\s*                        # optional pure modifier
				 (\{|\n))                              # start bracket or end-of-line
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.destructor.c++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
				(?:  ^                                 # begin-of-line
				  |  (?: (?&lt;!else|new|=) )             #  or word + space before name
				)
				((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name
				 \s*(\() (?=[^)]*\)                      # match "(" and use look-ahead for ")"
				 (\s*=\s*0)?\s*                        # optional pure modifier
				 ;)                                    # terminating semi-colon
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.destructor.prototype.c++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
				(?:  ^\s*)                             # begin-of-line
				((?!while|for|do|if|else|switch|catch|enumerate|iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name
				 \s*(\() (?=                             # match "("
				           (?&lt;arg&gt; [^()]++ | \( \g&lt;arg&gt;*+ \) )*+   # function arguments
				    \)                                 # match ")"
				 (\s* : (?&lt;base&gt; \s* [A-Za-z_][A-Za-z0-9_]* \( \g&lt;arg&gt;*+ \) ) (, \g&lt;base&gt;)* (, (?=\s*\n))? )? \s*  # optional base constructors
				 (\{|\n))                              # start bracket or end-of-line
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.constructor.c++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.c++</string>
	<key>uuid</key>
	<string>26251B18-6B1D-11D9-AFDB-000D93589AF6</string>
</dict>
</plist>

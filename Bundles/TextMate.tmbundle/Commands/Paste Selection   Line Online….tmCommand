<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rjcode -KU

BUNDLE_SUPPORT = ENV['TM_BUNDLE_SUPPORT']

require "#{BUNDLE_SUPPORT}/lib/doctohtml.rb"
require 'textmate'
require 'progress'
require 'escape'
require 'cgi'
require 'fileutils'
require 'zlib'
require "yaml"

def temp_script(script)
  dest = %x{ /usr/bin/mktemp -t tm_paste }.chomp
  at_exit { File.delete dest }
  FileUtils.cp(script, dest)
  dest
end

# example: ["Colloquy", "#textmate"] -&gt; [ 2, 1 ]
def indices_for_names(names, tree)
  name = names.shift
  node = tree.find { |n| n["name"] == name }
  return [ 0 ] if node.nil?
  res  = [ tree.index(node) ]
  res += indices_for_names(names, node["children"]) unless names.empty? || node["children"].nil?
  return res
end

# example: [ 2, 1 ] -&gt; ["Colloquy", "#textmate"]
def names_for_indices(indices, tree)
  node = tree[indices.shift.to_i]
  res  = [ node["name"] ]
  res += names_for_indices(indices, node["children"]) unless indices.empty?
  return res
end

PREFS_FILE = "#{ENV['HOME']}/Library/Preferences/com.macromates.textmate.paste_online.yaml"

def load_prefs(destinations)
  prefs = File.open(PREFS_FILE) { |file| YAML.load(file) } rescue { }
  selected = prefs['selectedDestinations'] || [ [ "Paste to Colloquy:", "#textmate" ] ]
  selected.collect! { |names| indices_for_names(names, destinations) }
  return { 'selectedDestinations' =&gt; selected }
end

def save_prefs(params)
  selected = params['selectedDestinations'].dup
  selected.collect! { |indices| names_for_indices(indices.dup, params['destinations']) }
  File.open(PREFS_FILE, "w") { |file| YAML.dump({ 'selectedDestinations' =&gt; selected }, file) }
end

def get_destinations
  destinations = []
  node = nil

  actions = %x{ osascript #{e_sh temp_script(BUNDLE_SUPPORT + "/get_destinations.scpt")} }
  actions.split("\n").each do |action|
    if action =~ /^\t(.+)/ then
      (node['children'] ||= [ ]) &lt;&lt; { 'name' =&gt; $1 }
    else
      node = { 'name' =&gt; action }
      destinations &lt;&lt; node
    end
  end

  destinations.sort! { |a, b| a['name'] &lt;=&gt; b['name'] }
  destinations.each { |e| e['children'].sort! { |a, b| a['name'] &lt;=&gt; b['name'] } if e.has_key? 'children' }

  prefs = load_prefs(destinations)

  window_title = if ENV.has_key? 'TM_SELECTED_TEXT'; 'Paste Selection Online'; else 'Paste Line Online'; end
  default_wrap = (ENV['TM_SCOPE'] =~ /^text\./) ? 1 : 0
  parameters = {
    'windowTitle'           =&gt; window_title,
    'destinations'          =&gt; destinations,
    'selectedDestinations'  =&gt; prefs['selectedDestinations'],
    'private'               =&gt; 0,
    'lineWrap'              =&gt; default_wrap,
  }.to_plist

  res = %x{ "$TM_SUPPORT_PATH/bin/tm_dialog" -cmp #{e_sh parameters} pastebin }
  exit if $? != 0

  res = PropertyList.load(res)
  exit unless res.has_key? 'returnCode'

  save_prefs(res)

  actions = []
  res['selectedDestinations'].to_a.each do |index_array|
    path = []
    node = destinations
    index_array.each do |index|
      path &lt;&lt; node[index.to_i]['name']
      node = node[index.to_i]['children']
    end
    actions &lt;&lt; path.join(' ')
  end

  [ actions.join("\n"), res['private'], res['lineWrap'] ]
end

def find_language_ext
	bundle_dirs = [
		File.expand_path('~/Library/Application Support/TextMate/Bundles'),
		'/Library/Application Support/TextMate/Bundles',
		TextMate.app_path + '/Contents/SharedSupport/Bundles'
	]

  if scope = ENV['TM_SCOPE'] then
    scope = scope.split(' ').first
    bundle_dirs.each do |dir|
      Dir.glob(dir + '/*.tmbundle/Syntaxes/*.{plist,tmLanguage}') do |filename|
        File.open(filename) do |io|
          plist = PropertyList.load(io)
          if scope == plist['scopeName'].to_s then
            return Array(plist['fileTypes']).first || 'txt'
          end
        end
      end
    end
  end

  ext = File.extname(ENV['TM_FILENAME'].to_s).sub(/\A\./, '')
  ext.empty? ? 'txt' : ext
end

def paste_stdin(priv, wrap)
  url = ENV['TM_PASTIE_URL'] || 'http://pastie.textmate.org/pastes/create'
  server = $1 if url =~ %r{.*?://(.*?)(/.*)?$}
  TextMate.call_with_progress(:title =&gt; 'Paste to Pastie', :message =&gt; "Contacting Server “#{server}”…") do
    text_file, html_file = `/usr/bin/mktemp -t tm_paste &amp;&amp; /usr/bin/mktemp -t tm_paste`.split("\n")
    at_exit { File.delete(text_file); File.delete(html_file) }

    xml = STDIN.read

    open(text_file, 'w') do |io|
      io &lt;&lt; CGI::unescapeHTML(xml.gsub(/&lt;[^&gt;]*&gt;/, ''))
    end

    Zlib::GzipWriter.open(html_file) do |gz|
      gz.write document_to_html(xml)
    end

    author = "#{`niutil -readprop / "/users/$USER" realname`.chomp} (#{ENV['USER']})"
    ext = find_language_ext

    %x{
      curl #{url} \
      -s -L -o /dev/null -w "%{url_effective}" \
      -H "Expect:" \
      -F "paste[parser]=plaintext" \
      -F "paste[restricted]=#{priv}" \
      -F "paste[wrap]=#{wrap}" \
      -F "paste[display_name]=#{author}" \
      -F "paste[file_extension]=#{ext}" \
      -F "paste[body]=&lt;#{text_file}" \
      -F "paste[textmate_html_gz]=&lt;#{html_file}"
    }
  end
end

pid = fork do
  dests, priv, wrap = get_destinations
  unless dests.empty?
    url = paste_stdin(priv, wrap)
    %x{ osascript #{e_sh temp_script(BUNDLE_SUPPORT + "/paste_to_destinations.scpt")} #{e_sh url} #{e_sh dests} }
    puts "Pasted #{url}"
  end
end

Process.detach(pid)

</string>
	<key>fallbackInput</key>
	<string>line</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>xml</string>
	<key>keyEquivalent</key>
	<string>^~V</string>
	<key>name</key>
	<string>Paste Line / Selection Online…</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>uuid</key>
	<string>6E779E48-F146-49BF-B60C-EFDFD1380772</string>
</dict>
</plist>

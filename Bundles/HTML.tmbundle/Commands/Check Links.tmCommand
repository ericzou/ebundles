<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>name</key>
        <string>Check Links</string>
        <key>uuid</key>
        <string>A92F9113-04EF-48A6-99C7-EA7BA7467C1E</string>
        <key>input</key>
        <string>none</string>
        <key>output</key>
        <string>showAsHTML</string>
        <key>command</key>
        <string>#!/usr/bin/python

# Link checker, modified for the e-text editor
# this and other scripts i have made to aid 
# my web-development at foo-fu.co.uk

import os
import re

class link_finder():
    regexs = []
    links = []
    cur_file = ""
    doc_root = ""



    def __init__(self):

        regexs = [
            '(?&lt;=href=")[A-Za-z0-9_:/.-]*(?=")', #a href
            '(?&lt;=src=")[A-Za-z0-9_:/.-]*(?=")',  #img src
            '(?&lt;=url\()[A-Za-z0-9_:/.-]*(?=\))'  #css url
            '(?&lt;=import\()[A-Za-z0-9_:/.-]*(?=\))'  #css import
            '(?&lt;=require\()[A-Za-z0-9_:/.-]*(?=\))'  #php require
            '(?&lt;=include\()[A-Za-z0-9_:/.-]*(?=\))'  #php include
            ]

        for regex in regexs:
            self.regexs.append(re.compile(regex))
            

      
    def get_links(self,txt):
        line_num = 0
        
        for line in txt:
            line_num += 1

            for regex in self.regexs:
                for match in regex.findall(line):
                    if match[0:7] != "mailto:" and match[0:7] != "http://"and match[0:1] != "#": 
                        match = match.split("#")[0]
                        self.links.append((match,line_num))
						
                        
class link_checker():

    ext_to_check = ["htm","html","css","php"]
    root = ""
    current_file = ""
    
    files_to_check = []
    files = []
    orphans = []


    errors = []

    valid_links = []
    broken_links = {}
    num_broken_links = 0
    
    def get_file_list(self):
        os.chdir(self.root)
                
        for dirpath,dirnames,filenames in os.walk(os.curdir):
            for this_file in filenames:
                
                this_path = os.path.normpath(os.path.join(self.root,dirpath,this_file))
                self.files.append(this_path)
                
                try:
                    this_ext =  this_file.rsplit(".",1)[1]
                    
                    if this_ext in self.ext_to_check:    
                        self.files_to_check.append(this_path)
                        
                except IndexError,e:
                    self.errors.append("IndexError " + this_path)
                    
    def get_broken_links(self):
        my_link_finder = link_finder()
        for this_file in self.files_to_check:
           

            my_link_finder.links = []
            my_link_finder.doc_root =  os.path.split(this_file.replace("\\","\\\\"))[0]
            my_link_finder.cur_file = this_file
            
            f = open(this_file,"U")
            my_link_finder.get_links(f.readlines())


            for link,line in my_link_finder.links:
                link_path =  os.path.normpath(os.path.join(my_link_finder.doc_root,link))

                if link_path not in self.valid_links:
                    
                    if link_path not in self.files:
                        self.num_broken_links += 1

                        if self.broken_links.has_key(my_link_finder.cur_file):
                            self.broken_links[my_link_finder.cur_file].append([line,link_path])
                        else:
                            self.broken_links[my_link_finder.cur_file] = [[line,link_path],]
                            
                    else:
                        self.valid_links.append(link_path)



    def get_orphans(self):
        for this_file in self.files:
            if this_file not in my_link_checker.valid_links:
                self.orphans.append(this_file)

        
    def textmate_link(self,host_file,link_path,line_number,link_text):
        return "".join(('&lt;a href="txmt://open/?url=file://',host_file , "&amp;amp;line=" , str(line_number) , '"&gt;',link_text,'&lt;/a&gt;'))

    def print_stats(self):
        # yay for big ugly output functions ^.^
        print '&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-type" content="text/html; charset=utf-8" /&gt;&lt;title&gt;Link Checker&lt;/title&gt;&lt;style type="text/css" media="screen"&gt;*{font-size:0.95em;font-family:verdana;}div.borked{margin:0px 0px 0px 30px}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;'
        print '&lt;p&gt;'
        print len(self.files), ' files in project | '
        print len(self.files_to_check), 'files checked  | '
        print self.num_broken_links, 'broken links  | '
        print len(self.broken_links), 'files with broken links | '
        print len(self.orphans), ' orphaned files&lt;/p&gt;'
        
        if self.num_broken_links &gt; 0 :
            print '&lt;h1&gt;Broken Links:&lt;/h1&gt;'

            for page in self.broken_links.keys():
                print page,self.textmate_link(page,None,0,"open")+"&lt;br /&gt;"
                for link in self.broken_links[page]:
                    print '&lt;div class="borked"&gt;',self.textmate_link(page,link[1],link[0],"Line " + str(link[0])),' links to :',link[1], "&lt;/div&gt;"
                    
        if len(self.orphans) &gt; 0:
            print '&lt;p&gt;&lt;h2&gt;Orphaned Files:&lt;/h2&gt;'
            for orphan in self.orphans:
                print '&lt;div class="borked"&gt;',orphan,'&lt;/div&gt;'
            print '&lt;/p&gt;'
            
        if len(self.errors) &gt; 0:
            print '&lt;p&gt;&lt;h2&gt;Errors:&lt;/h2&gt;'
            for error in self.errors:
                print '&lt;div class="borked"&gt;',error,'&lt;/div&gt;'
            print '&lt;/p&gt;'

        if (len(self.errors) + len(self.orphans) + self.num_broken_links)  == 0:
            print "&lt;h1&gt;well done ;)&lt;/h1&gt;"
            
        print "&lt;p&gt;--&lt;br&gt;by sjh | foo-fu.co.uk&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"

    def __init__(self,root):
        self.root = root
        

    def e_output(self):
        self.get_file_list()
        self.get_broken_links()
        self.get_orphans()
        self.print_stats()


import profile

project =  os.environ.get('TM_PROJECT_DIRECTORY')

if project:
	my_link_checker = link_checker(project)
	#profile.run('my_link_checker.e_output()')
	my_link_checker.e_output()
else:
	print "No project open"</string>
        <key>keyEquivalent</key>
        <string>^C</string>
    </dict>
</plist>
